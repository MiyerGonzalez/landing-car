---
// src/components/cards.astro
interface Car {
  id: string | number;
  brand: string;
  model: string;
  description: string;
  pricePerDay: number | string;
  image: string;
  alt?: string;
  name?: string; // opcional (ej. "SUV Compacta")
}

const {
  cars = [] as Car[],
  title = 'Autos disponibles',
} = Astro.props;

// Aseguramos un orden estable por id (si es numérico) y mantenimiento de todos los ids.
const normalized = cars
  .map((c, i) => ({
    ...c,
    __id: String(c.id ?? i),
    __num: typeof c.id === 'number' ? c.id : Number.isFinite(Number(c.id)) ? Number(c.id) : i,
  }))
  .sort((a, b) => a.__num - b.__num);
---
<section data-slider class="relative">
  <div class="mb-4 flex items-center justify-between">
    <h2 class="text-lg font-semibold text-gray-900">{title}</h2>

    <div class="flex gap-2">
      <button
        type="button"
        class="rounded-md border border-gray-200 p-2 text-gray-700 hover:bg-gray-100 disabled:opacity-40"
        data-prev
        aria-label="Anterior"
      >
        <svg viewBox="0 0 24 24" class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <button
        type="button"
        class="rounded-md border border-gray-200 p-2 text-gray-700 hover:bg-gray-100 disabled:opacity-40"
        data-next
        aria-label="Siguiente"
      >
        <svg viewBox="0 0 24 24" class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </div>

  <div class="relative">
    <div
      class="no-scrollbar flex items-stretch gap-4 overflow-x-auto scroll-smooth snap-x snap-mandatory"
      data-track
      aria-label="Carrusel de autos"
      style="--spacer: 0px;"
    >
      <!-- Espaciadores dinámicos para centrar primera/última -->
      <div class="spacer snap-none shrink-0" aria-hidden="true"></div>

      {normalized.map((car, idx) => (
        <article
          id={`car-${car.__id}`}
          data-index={idx}
          data-id={car.__id}
          class="card snap-center shrink-0 w-full max-w-2xl min-w-[350px] rounded-2xl border border-gray-100 bg-white shadow-lg"
        >
          <div class="relative aspect-[16/9] w-full overflow-hidden rounded-t-2xl bg-gray-100">
            <img
              src={car.image}
              alt={car.alt ?? `${car.brand} ${car.model}`}
              loading="lazy"
              class="h-full w-full object-cover"
            />
          </div>

          <div class="p-8">
            <h3 class="text-2xl font-bold text-gray-900">
              {car.name ?? `${car.brand} ${car.model}`}
            </h3>
            <p class="mt-2 text-lg text-gray-600">
              <span class="font-semibold">{car.brand}</span> · {car.model}
            </p>
            <p class="mt-4 text-base text-gray-700 line-clamp-3">
              {car.description}
            </p>

            <div class="mt-6 flex items-baseline justify-between">
              <span class="text-2xl font-bold text-blue-700" data-price>
                {String(car.pricePerDay)}
              </span>
              <span class="text-sm text-gray-500">por día</span>
            </div>
          </div>
        </article>
      ))}

      <div class="spacer snap-none shrink-0" aria-hidden="true"></div>
    </div>

    <div class="pointer-events-none mt-3 flex justify-center gap-2" data-dots></div>
  </div>
</section>

<style is:global>
.no-scrollbar::-webkit-scrollbar { display: none; }
.no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }

/* Clamp si no usas plugin */
.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Los espaciadores se dimensionan vía --spacer calculada en JS */
.spacer { width: var(--spacer); }

/* Para mantener una sola tarjeta protagonistas, usa un ancho fijo cómodo */
.card {
  scroll-snap-align: center;
  width: 100%;
  min-width: 350px;
  max-width: 640px; /* 2xl */
  margin-left: auto;
  margin-right: auto;
  border-radius: 1rem;
  box-shadow: 0 6px 32px 0 rgba(0,0,0,0.10);
}
[data-track] {
  max-width: 640px;
  margin-left: auto;
  margin-right: auto;
}
</style>

<script>
  (() => {
    const sliders = document.querySelectorAll('[data-slider]');

    const formatCOP = (value) => {
      if (typeof value === 'number' || !Number.isNaN(Number(value))) {
        return new Intl.NumberFormat('es-CO', {
          style: 'currency',
          currency: 'COP',
          maximumFractionDigits: 0,
        }).format(Number(value));
      }
      return String(value);
    };

    sliders.forEach((root) => {
      const track = root.querySelector('[data-track]');
      const prev = root.querySelector('[data-prev]');
      const next = root.querySelector('[data-next]');
      const dotsContainer = root.querySelector('[data-dots]');
      if (!track || !prev || !next) return;

      const items = Array.from(track.querySelectorAll('.card'));
      const spacers = Array.from(track.querySelectorAll('.spacer'));

      // Formatear precios
      items.forEach((card) => {
        const priceEl = card.querySelector('[data-price]');
        if (priceEl) priceEl.textContent = formatCOP(priceEl.textContent);
      });

      if (items.length === 0) {
        (prev as HTMLButtonElement).disabled = true;
        (next as HTMLButtonElement).disabled = true;
        return;
      }

      // Calcular gap en px
      const gapPx = () => parseFloat(getComputedStyle(track).gap || '0');

      // Ancho efectivo de un item (card + gap)
      const itemWidth = () => {
        const first = items[0];
        if (!first) return 0;
        const rect = first.getBoundingClientRect();
        return rect.width + gapPx();
      };

      // Establecer espaciadores para centrar el primer/último elemento
      const setSpacers = () => {
        const card = items[0];
        if (!card) return;
        const vw = window.innerWidth;
        const rect = card.getBoundingClientRect();
        const spacer = Math.max(0, (vw - rect.width) / 2);
        (track as HTMLElement).style.setProperty('--spacer', spacer + 'px');
      };

      // Índice centrado actual
      const getIndex = () => {
        const w = itemWidth();
        if (w <= 0) return 0;
        const idx = Math.round(track.scrollLeft / w);
        return Math.max(0, Math.min(items.length - 1, idx));
      };

      const getTargetLeft = (index) => index * itemWidth();

      const update = () => {
        const i = getIndex();
        (prev as HTMLButtonElement).disabled = i <= 0;
        (next as HTMLButtonElement).disabled = i >= items.length - 1;
        if (dotsContainer) {
          dotsContainer.querySelectorAll('button').forEach((dot, j) => {
            dot.classList.toggle('bg-gray-900', j === i);
            dot.classList.toggle('bg-gray-300', j !== i);
          });
        }
      };

      // Crear dots
      if (dotsContainer) {
        dotsContainer.innerHTML = '';
        items.forEach((_, i) => {
          const dot = document.createElement('button');
          dot.type = 'button';
          dot.setAttribute('aria-label', 'Ir a la tarjeta ' + (i + 1));
          dot.className = 'pointer-events-auto h-2 w-2 rounded-full bg-gray-300 transition-colors';
          dot.addEventListener('click', () => {
            track.scrollTo({ left: getTargetLeft(i), behavior: 'smooth' });
          });
          dotsContainer.appendChild(dot);
        });
      }

      prev.addEventListener('click', () => {
        track.scrollBy({ left: -itemWidth(), behavior: 'smooth' });
      });
      next.addEventListener('click', () => {
        track.scrollBy({ left: itemWidth(), behavior: 'smooth' });
      });

      // Scroll -> actualizar UI
      let ticking = false;
      track.addEventListener('scroll', () => {
        if (ticking) return;
        ticking = true;
        requestAnimationFrame(() => { update(); ticking = false; });
      }, { passive: true });

      // Recalcular en resize
      const ro = new ResizeObserver(() => {
        setSpacers();
        update();
      });
      ro.observe(track);
      items.forEach((it) => ro.observe(it));

      // Inicio: aseguramos ver el primer id
      setSpacers();
      track.scrollTo({ left: 0 });
      update();
    });
  })();
</script>



