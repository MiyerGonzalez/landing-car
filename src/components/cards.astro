---
// src/components/cards.astro
interface Car {
  id?: string;
  name: string;
  model: string;
  brand: string;
  description: string;
  image: string;
  alt?: string;
  pricePerDay?: string;
}

const {
  cars = [] as Car[],
  title = 'Autos disponibles',
} = Astro.props;
---

<section data-slider class="relative flex flex-col items-center">
  <div class="mb-4 flex items-center justify-between w-full max-w-lg mx-auto">
    <h2 class="text-lg font-semibold text-gray-900">{title}</h2>
    <div class="flex gap-2">
      <button
        type="button"
        class="rounded-md border border-gray-200 p-2 text-gray-700 hover:bg-gray-100 disabled:opacity-40"
        data-prev
        aria-label="Anterior"
      >
        <svg viewBox="0 0 24 24" class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <button
        type="button"
        class="rounded-md border border-gray-200 p-2 text-gray-700 hover:bg-gray-100 disabled:opacity-40"
        data-next
        aria-label="Siguiente"
      >
        <svg viewBox="0 0 24 24" class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </div>

  <div class="relative w-full flex justify-center">
    <div
      class="no-scrollbar flex snap-x snap-mandatory gap-4 overflow-x-auto scroll-smooth justify-center w-full max-w-lg"
      data-track
      aria-label="Carrusel de autos"
      style="scrollbar-width: none;"
    >
      {cars.map((car) => (
        <article
          class="snap-center shrink-0 w-full max-w-md rounded-xl border border-gray-100 bg-white shadow-sm transition-transform duration-300"
          style="min-width: 100%;"
        >
          <div class="relative aspect-[16/9] w-full overflow-hidden rounded-t-xl bg-gray-100">
            <img
              src={car.image}
              alt={car.alt ?? `${car.brand} ${car.model}`}
              loading="lazy"
              class="h-full w-full object-cover"
            />
          </div>
          <div class="p-4">
            <h3 class="text-base font-semibold text-gray-900">{car.name}</h3>
            <p class="mt-1 text-sm text-gray-600">
              <span class="font-medium">{car.brand}</span> · {car.model}
            </p>
            <p class="mt-3 text-sm text-gray-700 line-clamp-3">
              {car.description}
            </p>
          </div>
        </article>
      ))}
    </div>
    <div class="pointer-events-none absolute -bottom-2 left-0 right-0 flex justify-center gap-2" data-dots></div>
  </div>
</section>

<style is:global>
.no-scrollbar::-webkit-scrollbar { display: none; }
.no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }
.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
[data-slider] {
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
}
[data-track] {
  scroll-snap-type: x mandatory;
  -webkit-overflow-scrolling: touch;
}
</style>

<script>
  (() => {
    const sliders = document.querySelectorAll('[data-slider]');

    sliders.forEach((root) => {
      const track = root.querySelector('[data-track]');
      const prev = root.querySelector('[data-prev]') as HTMLButtonElement | null;
      const next = root.querySelector('[data-next]') as HTMLButtonElement | null;
      const dotsContainer = root.querySelector('[data-dots]');
      if (!track || !prev || !next) return;

      const items = Array.from(track.children);
      if (items.length === 0) {
        if (prev) prev.disabled = true;
        if (next) next.disabled = true;
        return;
      }

      // Crear dots
      if (dotsContainer) {
        dotsContainer.innerHTML = '';
        items.forEach((_, i) => {
          const dot = document.createElement('button');
          dot.type = 'button';
          dot.setAttribute('aria-label', 'Ir a la tarjeta ' + (i + 1));
          dot.className = 'pointer-events-auto h-2 w-4 rounded-full bg-gray-300 transition-colors';
          dot.addEventListener('click', () => {
            track.scrollTo({ left: getTargetLeft(i), behavior: 'smooth' });
          });
          dotsContainer.appendChild(dot);
        });
      }

      function gapPx() {
        const g = getComputedStyle(track).gap || '0px';
        return parseFloat(g);
      }
      function itemWidth() {
        const first = items[0];
        if (!first) return 0;
        const rect = first.getBoundingClientRect();
        return rect.width + gapPx();
      }
      function getIndex() {
        const idx = Math.round(track.scrollLeft / itemWidth());
        return Math.max(0, Math.min(items.length - 1, idx));
      }
      function getTargetLeft(index) {
        return index * itemWidth();
      }
      function update() {
        const i = getIndex();
        prev.disabled = i <= 0;
        next.disabled = i >= items.length - 1;
        if (dotsContainer) {
          dotsContainer.querySelectorAll('button').forEach((dot, j) => {
            dot.classList.toggle('bg-gray-900', j === i);
            dot.classList.toggle('bg-gray-300', j !== i);
          });
        }
      }

      prev.addEventListener('click', () => {
        track.scrollBy({ left: -itemWidth(), behavior: 'smooth' });
      });
      next.addEventListener('click', () => {
        track.scrollBy({ left: itemWidth(), behavior: 'smooth' });
      });

      // Actualiza dots/botones en scroll con rAF para suavidad
      let ticking = false;
      track.addEventListener('scroll', () => {
        if (ticking) return;
        ticking = true;
        requestAnimationFrame(() => {
          update();
          ticking = false;
        });
      }, { passive: true });

      // Mantén el índice correcto en cambios de tamaño
      const ro = new ResizeObserver(() => update());
      ro.observe(track);

      update();
    });
  })();
</script>


